{"version":3,"sources":["Component/Card.js","Component/CardCollecion.js","Component/SearchBox.js","Component/Scroll.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardCollecion","props","arrayList","robots","map","user","i","key","SearchBox","type","placeholder","onChange","search","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","arrayRobots","fetch","then","response","json","users","filterRobot","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iNAgBeA,G,KAbF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAOC,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,GAC9B,OACM,yBAAKC,UAAW,sDACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACvB,6BACD,4BAAKF,GACL,2BAAIC,OCGKK,EAPO,SAAAC,GACrB,IAAMC,EAAYD,EAAME,OAAOC,KAAI,SAACC,EAAKC,GACzC,OAAO,kBAAC,EAAD,CAAMC,IAAOF,EAAKT,GAAIF,KAAMW,EAAKX,KAAOE,GAAIS,EAAKT,GAAKD,MAAQU,EAAKV,WAE1E,OAAO,6BAAMO,ICKCM,EAXG,SAACP,GACjB,OACM,yBAAKJ,UAAY,OACZ,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,mBACZC,SAAWV,EAAMW,WCAdC,EAPD,SAACZ,GACf,OACC,yBAAKa,MAAO,CAACC,UAAU,SAAWC,OAAO,kBAAoBC,OAAO,UACjEhB,EAAMiB,WCwCIC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAMDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SANxC,EAAKC,MAAQ,CACZC,YAAc,GACdJ,YAAc,IAJH,E,gEAWO,IAAD,OAClBK,MAAM,8CAA8CC,MACnD,SAAAC,GACC,OAAOA,EAASC,UACdF,MACH,SAAAG,GACC,EAAKV,SAAS,CAACK,YAAYK,S,+BAIpB,IAAD,OACFC,EAAcC,KAAKR,MAAMC,YAAYQ,QAAO,SAAC9B,EAAKC,GACrD,OAAOD,EAAKX,KAAK0C,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAElE,OACI,yBAAKvC,UAAU,MACX,6CACA,kBAAC,EAAD,CAAWe,OAAUsB,KAAKd,iBAC1B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAejB,OAAQ8B,U,GA/BnBK,IAAMC,W,MCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACN,6BACG,kBAAC,EAAD,OAIJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a478b591.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"tachyons\";\r\n\r\nconst Card = ({ name , email , id }) => {\r\n\treturn (\r\n\t  \t\t  <div className ='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t       <img alt='Robot' src={`https://robohash.org/${id}?size=200x200`}/> \r\n\t\t\t    <div>\r\n\t\t\t\t  <h1>{name}</h1>\r\n\t\t\t\t  <p>{email}</p>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t\r\n\t\t\t);\r\n\t}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardCollecion = props => {\r\n\tconst arrayList = props.robots.map((user,i)=>{\r\n\treturn(<Card key = {user.id} name={user.name}  id={user.id}  email ={user.email} />)\r\n     });\r\n\treturn <div>{arrayList}</div>\t\t\t     \t\t\t\r\n\t\r\n}\r\nexport default CardCollecion;","import React from 'react';\r\n\r\n\r\nconst SearchBox = (props)=>{\r\n\t\treturn ( \r\n\t\t\t     <div className = \"pa2\">\r\n\t\t\t          <input \r\n\t\t\t          className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t          type=\"search\" \r\n\t\t\t          placeholder=\"Search for robot\" \r\n\t\t\t          onChange ={props.search}/>\r\n\t\t\t     </div>\r\n\t\t\t)\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll' , border:'2px solid black' , height:'800px'}}>\r\n\t\t  {props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default  Scroll;","import React from 'react';\r\nimport CardCollecion from '../Component/CardCollecion';\r\nimport SearchBox from '../Component/SearchBox';\r\nimport Scroll from '../Component/Scroll';\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tarrayRobots : [],\r\n\t\t\tsearchField : ''\r\n\t\t}\r\n\t}\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchField:event.target.value});\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(\r\n\t\t\tresponse=>{\r\n\t\t\t\treturn response.json();\r\n\t\t\t}).then(\r\n\t\t\tusers=>{\r\n\t\t\t\tthis.setState({arrayRobots:users});\r\n\t\t\t});\r\n\t\t\r\n\t}\r\n\trender() {\r\n\t\tconst filterRobot = this.state.arrayRobots.filter((user,i)=>{\r\n\t\t\t  return user.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn(\r\n\t\t\t\t  <div className=\"tc\">\r\n\t\t\t\t      <h1>ROBO CONTACT </h1>\r\n\t\t\t\t      <SearchBox search = {this.onSearchChange}/>\r\n\t\t\t\t      <Scroll>\r\n\t\t\t\t          <CardCollecion robots={filterRobot} />\r\n\t\t\t          </Scroll>\r\n\t\t\t      </div>\r\n              )\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Container/App';\nimport './index.css';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <div>\n      <App  />\n   </div>\n\n\n\t,document.getElementById('root')\n\n\n\n\t);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}